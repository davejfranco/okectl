provider "oci" {}

locals {
  #CIDR block for the vcn
  vcn_cidr_block = "{{ .Vcn.CidrBlock }}"
  service_lb_subnet_cidr_block = cidrsubnet(local.vcn_cidr_block, 8, 1)
  node_subnet_cidr_block = cidrsubnet(local.vcn_cidr_block, 8, 2)
  kubernetes_api_endpoint_subnet_cidr_block = cidrsubnet(local.vcn_cidr_block, 12, 3)
}

# Data sources
data "oci_identity_availability_domains" "this" {
  compartment_id = "{{.Vcn.CompartmentID}}"
}

data "oci_core_services" "all_oci_services" {
  filter {
    name   = "name"
    values = ["All .* Services In Oracle Services Network"]
    regex  = true
  }
}

# Resources
## Networking
resource "oci_core_vcn" "this" {
  cidr_block     = local.vcn_cidr_block
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-vcn"
  dns_label      = "{{.Cluster.Name}}"
}

## Gateways
resource "oci_core_internet_gateway" "this" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-igw"
  enabled        = "true"
  vcn_id         = oci_core_vcn.this.id
}

resource "oci_core_nat_gateway" "this" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-ngw"
  vcn_id         = oci_core_vcn.this.id
}

resource "oci_core_service_gateway" "this" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-sgw"
  services{
    service_id = data.oci_core_services.all_oci_services.services[0].id  
  }
  vcn_id = oci_core_vcn.this.id
}

## Route Tables
resource "oci_core_route_table" "this_private_rt" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-private-rt"
  route_rules {
    description       = "traffic to the internet"
    destination       = "0.0.0.0/0"
    destination_type  = "CIDR_BLOCK"
    network_entity_id = oci_core_nat_gateway.this.id
  }
  route_rules {
    description       = "traffic to OCI services"
    destination       = data.oci_core_services.all_oci_services.services[0].cidr_block // Al * Services In Oracle Services Network
    destination_type  = "SERVICE_CIDR_BLOCK"
    network_entity_id = oci_core_service_gateway.this.id
  }
  vcn_id = oci_core_vcn.this.id
}

resource "oci_core_route_table" "this_public_rt" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name = "{{.Cluster.Name}}-public-rt"
  
  route_rules {
    description       = "traffic to/from internet"
    destination       = "0.0.0.0/0"
    destination_type  = "CIDR_BLOCK"
    network_entity_id = oci_core_internet_gateway.this.id
  }
  vcn_id = oci_core_vcn.this.id
}

## Security Lists
resource "oci_core_security_list" "service_lb_seclist" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-lb-seclist"
  vcn_id         = oci_core_vcn.this.id
}

resource "oci_core_security_list" "node_seclist" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-node-seclist"
  
  egress_security_rules {
    description      = "Allow pods on one worker node to communicate with pods on other worker nodes"
    destination      = local.node_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    protocol         = "all"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "Access to Kubernetes API Endpoint"
    destination      = local.kubernetes_api_endpoint_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    protocol         = "6"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "Kubernetes worker to control plane communication"
    destination      = local.kubernetes_api_endpoint_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    protocol         = "6"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "Path discovery"
    destination      = local.kubernetes_api_endpoint_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    icmp_options {
      code = "4"
      type = "3"
    }
    protocol  = "1"
    stateless = "false"
  }
  egress_security_rules {
    description      = "Allow nodes to communicate with OKE to ensure correct start-up and continued functioning"
    destination      = data.oci_core_services.all_oci_services.services[0].cidr_block
    destination_type = "SERVICE_CIDR_BLOCK"
    protocol         = "6"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "ICMP Access from Kubernetes Control Plane"
    destination      = "0.0.0.0/0"
    destination_type = "CIDR_BLOCK"
    icmp_options {
      code = "4"
      type = "3"
    }
    protocol  = "1"
    stateless = "false"
  }
  egress_security_rules {
    description      = "Worker Nodes access to Internet"
    destination      = "0.0.0.0/0"
    destination_type = "CIDR_BLOCK"
    protocol         = "all"
    stateless        = "false"
  }
  ingress_security_rules {
    description = "Allow pods on one worker node to communicate with pods on other worker nodes"
    protocol    = "all"
    source      = local.node_subnet_cidr_block
    stateless   = "false"
  }
  ingress_security_rules {
    description = "Path discovery"
    icmp_options {
      code = "4"
      type = "3"
    }
    protocol  = "1"
    source    = local.node_subnet_cidr_block
    stateless = "false"
  }
  ingress_security_rules {
    description = "TCP access from Kubernetes Control Plane"
    protocol    = "6"
    source      = local.kubernetes_api_endpoint_subnet_cidr_block
    stateless   = "false"
  }
  ingress_security_rules {
    description = "Inbound SSH traffic to worker nodes"
    protocol    = "6"
    source      = "0.0.0.0/0"
    stateless   = "false"
  }
  vcn_id = oci_core_vcn.this.id
}

resource "oci_core_security_list" "k8sapi_seclist" {
  compartment_id = "{{.Vcn.CompartmentID}}"
  display_name   = "{{.Cluster.Name}}-k8sapi-seclist"
  egress_security_rules {
    description      = "Allow Kubernetes Control Plane to communicate with OKE"
    destination      = data.oci_core_services.all_oci_services.services[0].cidr_block
    destination_type = "SERVICE_CIDR_BLOCK"
    protocol         = "6"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "All traffic to worker nodes"
    destination      = local.node_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    protocol         = "6"
    stateless        = "false"
  }
  egress_security_rules {
    description      = "Path discovery"
    destination      = local.node_subnet_cidr_block
    destination_type = "CIDR_BLOCK"
    icmp_options {
      code = "4"
      type = "3"
    }
    protocol  = "1"
    stateless = "false"
  }
  ingress_security_rules {
    description = "External access to Kubernetes API endpoint"
    protocol    = "6"
    source      = "0.0.0.0/0"
    stateless   = "false"
  }
  ingress_security_rules {
    description = "Kubernetes worker to Kubernetes API endpoint communication"
    protocol    = "6"
    source      = local.node_subnet_cidr_block
    stateless   = "false"
  }
  ingress_security_rules {
    description = "Kubernetes worker to control plane communication"
    protocol    = "6"
    source      = local.node_subnet_cidr_block
    stateless   = "false"
  }
  ingress_security_rules {
    description = "Path discovery"
    icmp_options {
      code = "4"
      type = "3"
    }
    protocol  = "1"
    source    = local.node_subnet_cidr_block
    stateless = "false"
  }
  vcn_id = oci_core_vcn.this.id
}

## Subnets
resource "oci_core_subnet" "service_lb_subnet" {
  cidr_block                 = local.service_lb_subnet_cidr_block
  compartment_id             = "{{.Vcn.CompartmentID}}"
  display_name               = "{{.Cluster.Name}}-servicelb"
  dns_label                  = "{{ .Cluster.Name }}-servicelb"
  prohibit_public_ip_on_vnic = "false"
  route_table_id             = oci_core_route_table.this_public_rt.id
  security_list_ids          = [oci_core_security_list.service_lb_seclist.id]
  vcn_id                     = oci_core_vcn.this.id
}

resource "oci_core_subnet" "node_subnet" {
  cidr_block                 = local.node_subnet_cidr_block
  compartment_id             = "{{.Vcn.CompartmentID}}"
  display_name               = "{{.Cluster.Name}}-nodes"
  dns_label                  = "{{ .Cluster.Name }}-nodes"
  prohibit_public_ip_on_vnic = "true"
  route_table_id             = oci_core_route_table.this_private_rt.id
  security_list_ids          = [oci_core_security_list.node_seclist.id]
  vcn_id                     = oci_core_vcn.this.id
}

resource "oci_core_subnet" "k8sapi_subnet" {
  cidr_block                 = local.kubernetes_api_endpoint_subnet_cidr_block
  compartment_id             = "{{.Vcn.CompartmentID}}"
  display_name               = "{{.Cluster.Name}}-k8sapi"
  dns_label                  = "{{ .Cluster.Name }}-k8sapi"
  prohibit_public_ip_on_vnic = "false"
  route_table_id             = oci_core_route_table.this_public_rt.id
  security_list_ids          = [oci_core_security_list.k8sapi_seclist.id]
  vcn_id                     = oci_core_vcn.this.id
}


data "oci_containerengine_cluster_option" "this" {
    #Required
    cluster_option_id = "all"
    #Optional
    compartment_id = "{{.CompartmentID}}"
}

resource "oci_containerengine_cluster" "this" {
  cluster_pod_network_options {
		cni_type = "OCI_VCN_IP_NATIVE"
	}
  compartment_id = "{{.CompartmentID}}"
  endpoint_config {
    is_public_ip_enabled = "true"
    subnet_id            = oci_core_subnet.k8sapi_subnet.id
  }
  freeform_tags = {
    "OKEclusterName" = "{{.Cluster.Name}}"
  }
  //if kubernetes version is not set
  //the latest version will be used
  {{if eq .Cluster.Version ""}}
  kubernetes_version = element(data.oci_containerengine_cluster_option.this.kubernetes_versions,
    length(data.oci_containerengine_cluster_option.this.kubernetes_versions) - 1)
  {{else}}
  kubernetes_version = "{{.Cluster.Version}}"
  {{end}}
  name               = "{{.Cluster.Name}}"
  options {
    admission_controller_options {
      is_pod_security_policy_enabled = "false"
    }
    persistent_volume_config {
      freeform_tags = {
        "OKEclusterName" = "{{.Cluster.Name}}"
      }
    }
    service_lb_config {
      freeform_tags = {
        "OKEclusterName" = "{{.Cluster.Name}}"
      }
    }
    service_lb_subnet_ids = ["${oci_core_subnet.service_lb_subnet.id}"]
  }
  {{if eq .Cluster.Type ""}}
  type   = "BASIC_CLUSTER"
  {{ end }}
  vcn_id = oci_core_vcn.this.id
}

resource "oci_containerengine_node_pool" "this" {
  cluster_id     = oci_containerengine_cluster.this.id
  compartment_id = "{{.CompartmentID}}"
  freeform_tags = {
    "OKEnodePoolName" = "{{.NodePool.Name}}"
  }
  initial_node_labels {
    key   = "name"
    value = "{{.Cluster.Name}}-nodepool"
  }
  kubernetes_version = "{{.Cluster.Version}}"
  name               = "{{.NodePool.Name}}"
  node_config_details {
    freeform_tags = {
      "OKEnodePoolName" = "{{.NodePool.Name}}"
    }
    dynamic "placement_configs" {
			for_each = data.oci_identity_availability_domains.this.availability_domains
			content {
				availability_domain = placement_configs.value.name
				subnet_id = oci_core_subnet.node_subnet.id
			}
		}
    size = "{{.NodePool.Size}}"
  }
  node_eviction_node_pool_settings {
    eviction_grace_duration = "PT60M"
  }
  node_shape = "{{.NodePool.Shape}}"
  node_shape_config {
    memory_in_gbs = "{{.NodePool.ShapeConfig.RAM}}"
    ocpus         = "{{.NodePool.ShapeConfig.CPU}}"
  }
  node_source_details {
    image_id    = "{{.NodePool.ImageID}}"
    source_type = "IMAGE"
  }
}
